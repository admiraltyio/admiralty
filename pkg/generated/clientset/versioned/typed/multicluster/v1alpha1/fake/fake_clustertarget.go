/*
 * Copyright The Multicluster-Scheduler Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1alpha1 "admiralty.io/multicluster-scheduler/pkg/apis/multicluster/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeClusterTargets implements ClusterTargetInterface
type FakeClusterTargets struct {
	Fake *FakeMulticlusterV1alpha1
}

var clustertargetsResource = v1alpha1.SchemeGroupVersion.WithResource("clustertargets")

var clustertargetsKind = v1alpha1.SchemeGroupVersion.WithKind("ClusterTarget")

// Get takes name of the clusterTarget, and returns the corresponding clusterTarget object, and an error if there is any.
func (c *FakeClusterTargets) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.ClusterTarget, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(clustertargetsResource, name), &v1alpha1.ClusterTarget{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ClusterTarget), err
}

// List takes label and field selectors, and returns the list of ClusterTargets that match those selectors.
func (c *FakeClusterTargets) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.ClusterTargetList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(clustertargetsResource, clustertargetsKind, opts), &v1alpha1.ClusterTargetList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.ClusterTargetList{ListMeta: obj.(*v1alpha1.ClusterTargetList).ListMeta}
	for _, item := range obj.(*v1alpha1.ClusterTargetList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested clusterTargets.
func (c *FakeClusterTargets) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(clustertargetsResource, opts))
}

// Create takes the representation of a clusterTarget and creates it.  Returns the server's representation of the clusterTarget, and an error, if there is any.
func (c *FakeClusterTargets) Create(ctx context.Context, clusterTarget *v1alpha1.ClusterTarget, opts v1.CreateOptions) (result *v1alpha1.ClusterTarget, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(clustertargetsResource, clusterTarget), &v1alpha1.ClusterTarget{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ClusterTarget), err
}

// Update takes the representation of a clusterTarget and updates it. Returns the server's representation of the clusterTarget, and an error, if there is any.
func (c *FakeClusterTargets) Update(ctx context.Context, clusterTarget *v1alpha1.ClusterTarget, opts v1.UpdateOptions) (result *v1alpha1.ClusterTarget, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(clustertargetsResource, clusterTarget), &v1alpha1.ClusterTarget{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ClusterTarget), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeClusterTargets) UpdateStatus(ctx context.Context, clusterTarget *v1alpha1.ClusterTarget, opts v1.UpdateOptions) (*v1alpha1.ClusterTarget, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(clustertargetsResource, "status", clusterTarget), &v1alpha1.ClusterTarget{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ClusterTarget), err
}

// Delete takes name of the clusterTarget and deletes it. Returns an error if one occurs.
func (c *FakeClusterTargets) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(clustertargetsResource, name, opts), &v1alpha1.ClusterTarget{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeClusterTargets) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(clustertargetsResource, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.ClusterTargetList{})
	return err
}

// Patch applies the patch and returns the patched clusterTarget.
func (c *FakeClusterTargets) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.ClusterTarget, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(clustertargetsResource, name, pt, data, subresources...), &v1alpha1.ClusterTarget{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ClusterTarget), err
}
