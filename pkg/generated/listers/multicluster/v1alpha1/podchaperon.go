/*
 * Copyright The Multicluster-Scheduler Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "admiralty.io/multicluster-scheduler/pkg/apis/multicluster/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PodChaperonLister helps list PodChaperons.
// All objects returned here must be treated as read-only.
type PodChaperonLister interface {
	// List lists all PodChaperons in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PodChaperon, err error)
	// PodChaperons returns an object that can list and get PodChaperons.
	PodChaperons(namespace string) PodChaperonNamespaceLister
	PodChaperonListerExpansion
}

// podChaperonLister implements the PodChaperonLister interface.
type podChaperonLister struct {
	indexer cache.Indexer
}

// NewPodChaperonLister returns a new PodChaperonLister.
func NewPodChaperonLister(indexer cache.Indexer) PodChaperonLister {
	return &podChaperonLister{indexer: indexer}
}

// List lists all PodChaperons in the indexer.
func (s *podChaperonLister) List(selector labels.Selector) (ret []*v1alpha1.PodChaperon, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PodChaperon))
	})
	return ret, err
}

// PodChaperons returns an object that can list and get PodChaperons.
func (s *podChaperonLister) PodChaperons(namespace string) PodChaperonNamespaceLister {
	return podChaperonNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PodChaperonNamespaceLister helps list and get PodChaperons.
// All objects returned here must be treated as read-only.
type PodChaperonNamespaceLister interface {
	// List lists all PodChaperons in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.PodChaperon, err error)
	// Get retrieves the PodChaperon from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.PodChaperon, error)
	PodChaperonNamespaceListerExpansion
}

// podChaperonNamespaceLister implements the PodChaperonNamespaceLister
// interface.
type podChaperonNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PodChaperons in the indexer for a given namespace.
func (s podChaperonNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PodChaperon, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PodChaperon))
	})
	return ret, err
}

// Get retrieves the PodChaperon from the indexer for a given namespace and name.
func (s podChaperonNamespaceLister) Get(name string) (*v1alpha1.PodChaperon, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("podchaperon"), name)
	}
	return obj.(*v1alpha1.PodChaperon), nil
}
