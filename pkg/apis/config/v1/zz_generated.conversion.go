//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
 * Copyright 2020 The Multicluster-Scheduler Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by conversion-gen. DO NOT EDIT.

package v1

import (
	config "admiralty.io/multicluster-scheduler/pkg/apis/config"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *runtime.Scheme) error {
	if err := s.AddGeneratedConversionFunc((*CandidateArgs)(nil), (*config.CandidateArgs)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_CandidateArgs_To_config_CandidateArgs(a.(*CandidateArgs), b.(*config.CandidateArgs), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*config.CandidateArgs)(nil), (*CandidateArgs)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_config_CandidateArgs_To_v1_CandidateArgs(a.(*config.CandidateArgs), b.(*CandidateArgs), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*ProxyArgs)(nil), (*config.ProxyArgs)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1_ProxyArgs_To_config_ProxyArgs(a.(*ProxyArgs), b.(*config.ProxyArgs), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*config.ProxyArgs)(nil), (*ProxyArgs)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_config_ProxyArgs_To_v1_ProxyArgs(a.(*config.ProxyArgs), b.(*ProxyArgs), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1_CandidateArgs_To_config_CandidateArgs(in *CandidateArgs, out *config.CandidateArgs, s conversion.Scope) error {
	if err := metav1.Convert_Pointer_int32_To_int32(&in.PreBindWaitDurationSeconds, &out.PreBindWaitDurationSeconds, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1_CandidateArgs_To_config_CandidateArgs is an autogenerated conversion function.
func Convert_v1_CandidateArgs_To_config_CandidateArgs(in *CandidateArgs, out *config.CandidateArgs, s conversion.Scope) error {
	return autoConvert_v1_CandidateArgs_To_config_CandidateArgs(in, out, s)
}

func autoConvert_config_CandidateArgs_To_v1_CandidateArgs(in *config.CandidateArgs, out *CandidateArgs, s conversion.Scope) error {
	if err := metav1.Convert_int32_To_Pointer_int32(&in.PreBindWaitDurationSeconds, &out.PreBindWaitDurationSeconds, s); err != nil {
		return err
	}
	return nil
}

// Convert_config_CandidateArgs_To_v1_CandidateArgs is an autogenerated conversion function.
func Convert_config_CandidateArgs_To_v1_CandidateArgs(in *config.CandidateArgs, out *CandidateArgs, s conversion.Scope) error {
	return autoConvert_config_CandidateArgs_To_v1_CandidateArgs(in, out, s)
}

func autoConvert_v1_ProxyArgs_To_config_ProxyArgs(in *ProxyArgs, out *config.ProxyArgs, s conversion.Scope) error {
	if err := metav1.Convert_Pointer_int32_To_int32(&in.FilterWaitDurationSeconds, &out.FilterWaitDurationSeconds, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1_ProxyArgs_To_config_ProxyArgs is an autogenerated conversion function.
func Convert_v1_ProxyArgs_To_config_ProxyArgs(in *ProxyArgs, out *config.ProxyArgs, s conversion.Scope) error {
	return autoConvert_v1_ProxyArgs_To_config_ProxyArgs(in, out, s)
}

func autoConvert_config_ProxyArgs_To_v1_ProxyArgs(in *config.ProxyArgs, out *ProxyArgs, s conversion.Scope) error {
	if err := metav1.Convert_int32_To_Pointer_int32(&in.FilterWaitDurationSeconds, &out.FilterWaitDurationSeconds, s); err != nil {
		return err
	}
	return nil
}

// Convert_config_ProxyArgs_To_v1_ProxyArgs is an autogenerated conversion function.
func Convert_config_ProxyArgs_To_v1_ProxyArgs(in *config.ProxyArgs, out *ProxyArgs, s conversion.Scope) error {
	return autoConvert_config_ProxyArgs_To_v1_ProxyArgs(in, out, s)
}
